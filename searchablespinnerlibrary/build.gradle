apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'searchable-spinner'

    publishedGroupId = 'com.toptoche.searchablespinner'
    libraryName = 'SearchableSpinner'
    artifact = 'searchable-spinner'

    libraryDescription = 'A simple spinner with an extra functionality of searching the items in the spinner.'

    siteUrl = 'https://github.com/miteshpithadiya/SearchableSpinner'
    gitUrl = 'https://github.com/miteshpithadiya/SearchableSpinner.git'

    libraryVersion = '1.3.1'

    developerId = 'miteshpithadiya'
    developerName = 'Mitesh Pithadiya'
    developerEmail = 'miteshvanp@hotmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    namespace "com.toptoche.searchablespinner"
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 8
        versionName "1.3.1"
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

group = "com.toptoche.searchablespinner"
version = "1.3.1"

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                def releaseVariant = android.libraryVariants.find { it.name == "release" }
                if (releaseVariant != null) {
                    releaseVariant.outputs.each { output ->
                        artifact(output.outputFile) {
                            builtBy output.assemble // Use 'assemble' for older AGP versions
                        }
                    }
                }

                groupId = publishedGroupId
                artifactId = artifact
                version = libraryVersion

                pom {
                    name.set(libraryName)
                    description.set(libraryDescription)
                    url.set(siteUrl)

                    licenses {
                        license {
                            name.set(licenseName)
                            url.set(licenseUrl)
                        }
                    }
                    developers {
                        developer {
                            id.set(developerId)
                            name.set(developerName)
                            email.set(developerEmail)
                        }
                    }
                    scm {
                        connection.set("scm:git:$gitUrl")
                        developerConnection.set("scm:git:$gitUrl")
                        url.set(siteUrl)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
